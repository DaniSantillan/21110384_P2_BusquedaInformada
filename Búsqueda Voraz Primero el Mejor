def greedy_best_first_search(graph, start, goal):
    explored = set()
    queue = [(heuristic(start, goal), start)]  # Usamos una cola con la heurística como prioridad

    while queue:
        queue.sort()  # Ordenamos la cola por la heurística
        cost, node = queue.pop(0)

        if node == goal:
            return path_to_goal(graph, start, goal)

        explored.add(node)

        for neighbor in graph[node]:
            if neighbor not in explored:
                queue.append((heuristic(neighbor, goal), neighbor))

    return None  # No se encontró un camino

def heuristic(node, goal):
    # Heurística simple: distancia euclidiana
    return ((node[0] - goal[0]) ** 2 + (node[1] - goal[1]) ** 2) ** 0.5

def path_to_goal(graph, start, goal):
    # Reconstruir el camino desde el objetivo hasta el inicio
    path = [goal]
    current = goal

    while current != start:
        for neighbor in graph[current]:
            if heuristic(neighbor, start) < heuristic(current, start):
                current = neighbor
                path.append(current)
                break

    return path[::-1]  # Invertir el camino para que sea de inicio a objetivo

# Ejemplo de uso
graph = {
    (0, 0): [(1, 0), (0, 1)],
    (1, 0): [(0, 0), (2, 0)],
    (0, 1): [(0, 0), (0, 2)],
    (2, 0): [(1, 0), (2, 1)],
    (0, 2): [(0, 1), (1, 2)],
    (2, 1): [(2, 0), (2, 2)],
    (1, 2): [(0, 2), (2, 2)],
    (2, 2): [(1, 2), (2, 1)]
}

start_point = (0, 0)
goal_point = (2, 2)

result = greedy_best_first_search(graph, start_point, goal_point)
print(result)
